/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boardserver;

import com.sun.corba.se.spi.activation.Server;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Tien
 */
class CongViec {

    int CV;
    String Ten;

}

public class BoardServer extends javax.swing.JFrame {

    public static int defaultPort = 51195;
    Connection connection;
    Statement statement;
    String nameDB = "project";
    String nameTB = "ThanhVien";

    Mem mem;
    Job job;
    Project project;
    Support support;

    static String windowsClassName = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";

    /**
     * Creates new form BoardServer
     */
    public BoardServer() {
        try {
            initComponents();
            UIManager.setLookAndFeel(windowsClassName);
            SwingUtilities.updateComponentTreeUI(this);
            setIconImage(Toolkit.getDefaultToolkit().getImage("icon/server.jpg"));
            this.setSize(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width, java.awt.Toolkit.getDefaultToolkit().getScreenSize().height - 30);
            connection = createConnnection(nameDB);
            statement = createStatement(connection);
            mem = new Mem(connection, statement);
            job = new Job(connection, statement);
            project = new Project(connection, statement);
            support = new Support(connection, statement);
            Thread lis = new Thread(new deadLineNoti());
            lis.start();
        } catch (IOException ex) {
            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taCommand = new javax.swing.JTextArea();
        btExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btStart.setText("Khởi động");
        btStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartActionPerformed(evt);
            }
        });

        taCommand.setColumns(20);
        taCommand.setRows(5);
        jScrollPane1.setViewportView(taCommand);

        btExit.setText("Thoát");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btExit)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btExit, btStart});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btStart)
                    .addComponent(btExit))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btExit, btStart});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public class readData implements Runnable {

        Socket socket;
        InputStream is;
        OutputStream os;
        int port;

        public readData(Socket s) {
            try {
                socket = s;
                port = socket.getPort();
                os = socket.getOutputStream();
                is = socket.getInputStream();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            try {
                byte[] size = new byte[9];
                while (is.read(size) != 0) {
                    String userOnl = "";
                    String userOff = "";
                    String userList = "";
                    String userRoom = "";
                    int bytesRead = 0;
                    int bytesToRead = 0;
                    bytesToRead = ByteBuffer.wrap(size).asIntBuffer().get();
                    byte[] mybytearray = new byte[bytesToRead];
                    while (bytesRead < bytesToRead) {
                        bytesRead += is.read(mybytearray, bytesRead, bytesToRead - bytesRead);
                    }
                    String format = new String(mybytearray, 0, 3, "UTF-8");
                    String cmd = new String(mybytearray, 3, 3, "UTF-8");
                    String extra = new String(mybytearray, 6, 4, "UTF-8");
                    String data = new String(mybytearray, 10, mybytearray.length - 10, "UTF-8");
                    System.out.println("1. Stream" + format + cmd + extra + data);
                    taCommand.append(format + " " + cmd + " " + extra + "\n");
                    String dt[] = data.split("[|]");
                    String str;

                    switch (format) {
                        case "TXT":
                            switch (cmd) {
                                case "LOG":
                                    // Kiem tra xem username va password co dung k?
                                    str = "";
                                    String infoMem = "";
                                    String infoProject = "";
                                    if ((infoMem = mem.isTrue(nameTB, dt[0], dt[1])) != null) {
                                        str = "TXTLOGSUCC" + infoMem;
                                        String dtInfo[] = infoMem.split("[|]");
                                        infoProject = project.getInfoProject(dtInfo[0]);
                                        str = str + "|" + infoProject;
                                        //  System.out.println(str);
                                    } else {
                                        str = "TXTLOGFAIL";
                                    }
                                    taCommand.append(str);
                                    byte[] login = str.getBytes(Charset.forName("UTF-8"));
                                    byte[] sizeLogin = ByteBuffer.allocate(9).putInt(login.length).array();
                                    os.write(sizeLogin);
                                    os.write(login);
                                    os.flush();
                                    break;

                                case "DEA":
                                    if (extra.equals("UPDA")) {
                                        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                                        try {
                                            java.util.Date d = df.parse(dt[1]);
                                            if (job.updateDeadLine(dt[0], d.toString())) {
                                                str = "TXTDEAUPDASUCC";
                                            } else {
                                                str = "TXTDEAUPDAFAIL";
                                            }
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                            str = "TXTDEAUPDAFAIL";
                                        }
                                        taCommand.append(str);

                                        byte[] deadUpda = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizedeadUpda = ByteBuffer.allocate(9).putInt(deadUpda.length).array();
                                        os.write(sizedeadUpda);
                                        os.write(deadUpda);
                                        os.flush();
                                    }
                                case "ACC":
                                    if (extra.equals("CREA")) {
                                        String sqlCommand = "select \"TV#\" from \"ThanhVien\" where \"UserName\" = '" + dt[0] + "'";
                                        str = "TXTACCCREAFAIL";
                                        try {
                                            ResultSet rs = statement.executeQuery(sqlCommand);
                                            if (rs.next()) {
                                                str = "TXTACCCREAEXIS";
                                            } else {
                                                String userID = support.getMaxId("ThanhVien", "TV#");
                                                str = mem.creatNewAccount(userID, dt[0], dt[1], dt[2]);
                                                str = "TXTACCCREA" + str;

                                            }
                                        } catch (SQLException ex) {
                                            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        taCommand.append(str);

                                        byte[] acccreat = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeacccreat = ByteBuffer.allocate(9).putInt(acccreat.length).array();
                                        os.write(sizeacccreat);
                                        os.write(acccreat);
                                        os.flush();
                                    }
                                    break;

                                case "PRO":
                                    // TAO DU AN MOI

                                    if (extra.equals("CREA")) {
                                        String id = support.getMaxId("DuAn", "DA#");
                                        str = "";
                                        if (id != null) {
                                            str = "TXTPROCREASUCC|" + id + "|" + dt[0];
                                            project.addProject(id, dt[0], dt[1]);
                                        } else {
                                            str = "TXTPROCREAFAIL|" + id + "|" + dt[0];

                                        }
                                        taCommand.append(str);

                                        byte[] getPro = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizePro = ByteBuffer.allocate(9).putInt(getPro.length).array();
                                        os.write(sizePro);
                                        os.write(getPro);
                                        os.flush();
                                    } // LAY THONG TIN CAC CONG VIEC TRONG DU AN
                                    else if (extra.equals("GETJ")) {
                                        str = "TXTPROGETJ" + dt[0] + "|";
                                        String jobb = "";
                                        jobb = job.getJobFromProject(dt[0]);
                                        str += jobb;

                                        taCommand.append(str);
                                        byte[] getJob = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeJob = ByteBuffer.allocate(9).putInt(getJob.length).array();
                                        os.write(sizeJob);
                                        os.write(getJob);
                                        os.flush();
                                    } else if (extra.equals("REFR")) {
                                        str = "TXTPROREFR" + dt[0] + "|";
                                        String jobb = "";
                                        jobb = job.getJobFromProject(dt[0]);
                                        str += jobb;
                                        taCommand.append(str);
                                        byte[] getJob = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeJob = ByteBuffer.allocate(9).putInt(getJob.length).array();
                                        os.write(sizeJob);
                                        os.write(getJob);
                                        os.flush();
                                    } else if (extra.equals("UPDA")) {
                                        str = "";
                                        if (project.updateProject(dt[0], dt[1], dt[2])) {
                                            str = "TXTPROUPDASUCC";
                                        } else {
                                            str = "TXTPROUPDAFAIL";
                                        }
                                        taCommand.append(str);
                                        byte[] upPro = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizePro = ByteBuffer.allocate(9).putInt(upPro.length).array();
                                        os.write(sizePro);
                                        os.write(upPro);
                                        os.flush();
                                    } else if (extra.equals("GETL")) {
                                        str = "TXTPROGETL";
                                        infoProject = project.getInfoProject(dt[0]);
                                        str = str + infoProject;
                                        taCommand.append(str);
                                        byte[] getListP = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeListP = ByteBuffer.allocate(9).putInt(getListP.length).array();
                                        os.write(sizeListP);
                                        os.write(getListP);
                                        os.flush();
                                    } else if (extra.equals("SEAR")) {
                                        String rs = support.Search(dt[0]);
                                        str = "TXTPROSEAR";
                                        if (rs != null && rs.equals("") == false) {
                                            str += rs;
                                        }
                                        taCommand.append(str);
                                        byte[] search = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeSearch = ByteBuffer.allocate(9).putInt(search.length).array();
                                        os.write(sizeSearch);
                                        os.write(search);
                                        os.flush();
                                    }

                                    break;

                                case "MEM":
                                    //LAY THONG BAO
                                    if (extra.equals("GETN")) {
                                        String not = mem.getNot(dt[0]);
                                        System.out.println(not);
                                        str = "TXTMEMGETN" + not;

                                        taCommand.append(str);
                                        byte[] getNot = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeNot = ByteBuffer.allocate(9).putInt(getNot.length).array();
                                        os.write(sizeNot);
                                        os.write(getNot);
                                        os.flush();
                                    } else if (extra.equals("UPNO")) {
                                        mem.updateNot(Integer.parseInt(dt[0]));
                                    } else if (extra.equals("GETJ")) { //LAY THANH VIEN 
                                        String memb = "";
                                        for (int i = 0; i < dt.length; i++) {
                                            if (dt[i] != null && dt[i].equals("") == false) {
                                                memb += mem.getMemJ(dt[i]);
                                            }
                                        }
                                        str = "";
                                        if (memb != null) {
                                            str = "TXTMEMGETJSUCC" + "|" + memb;
                                        } else {
                                            str = "TXTMEMGETJFAIL";
                                        }
                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();

                                    } else if (extra.equals("GETP")) {
                                        String memb = "";
                                        for (int i = 0; i < dt.length; i++) {
                                            if (dt[i] != null && dt[i].equals("") == false) {
                                                memb += mem.getMemP(dt[i]);
                                            }
                                        }
                                        str = "";
                                        if (memb != null) {
                                            str = "TXTMEMGETPSUCC" + "|" + memb;
                                        } else {
                                            str = "TXTMEMGETPFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();
                                    }//ADD THANH VIEN
                                    else if (extra.equals("ADDJ")) {
                                        if (mem.addMemJ(dt[0], dt[1])) {
                                            str = "TXTMEMADDMSUCC";
                                        } else {
                                            str = "TXTMEMADDMFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();

                                    } else if (extra.equals("DELJ")) {
                                        if (mem.delMemJ(dt[0], dt[1])) {
                                            str = "TXTMEMDELESUCC";
                                        } else {
                                            str = "TXTMEMDELEFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();
                                    } else if (extra.equals("ADDP")) {
                                        if (mem.addMemP(dt[0], dt[1])) {
                                            str = "TXTMEMADDMSUCC";
                                        } else {
                                            str = "TXTMEMADDMFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();

                                    } else if (extra.equals("DELP")) {
                                        if (mem.delMemP(dt[0], dt[1])) {
                                            str = "TXTMEMDELESUCC";
                                        } else {
                                            str = "TXTMEMDELEFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();
                                    } else if (extra.equals("UPDA")) {
                                        if (mem.updateMem(Integer.parseInt(dt[0]), dt[1], dt[2])) {
                                            str = "TXTMEMUPDASUCC";
                                        } else {
                                            str = "TXTMEMUPDAFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();
                                    } else if (extra.equals("UPD2")) {
                                        if (mem.updateMem(Integer.parseInt(dt[0]), dt[1], dt[2], dt[3])) {
                                            str = "TXTMEMUPD2SUCC";
                                        } else {
                                            str = "TXTMEMUPD2FAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] getMem = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeMem = ByteBuffer.allocate(9).putInt(getMem.length).array();
                                        os.write(sizeMem);
                                        os.write(getMem);
                                        os.flush();
                                    }
                                    break;

                                //Lấy các thông tin về công việc
                                case "JOB":
                                    // TAO CONG VIEC
                                    if (extra.equals("CREA")) {
                                        String id = support.getMaxId("CongViec", "CV#");
                                        str = "";
                                        if (id != null) {
                                            str = "TXTJOBCREASUCC|" + id + "|" + dt[0] + "|" + dt[1];
                                            job.addJob(id, dt[0], dt[1], dt[2]);
                                        } else {
                                            str = "TXTJOBCREAFAIL|" + id + "|" + dt[0] + "|" + dt[1];

                                        }

                                        taCommand.append(str);
                                        byte[] getJob = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeJob = ByteBuffer.allocate(9).putInt(getJob.length).array();
                                        os.write(sizeJob);
                                        os.write(getJob);
                                        os.flush();
                                    } else if (extra.equals("INFO")) {
                                        str = "TXTJOBINFO" + dt[0] + "|";
                                        String infoJob = "";
                                        infoJob = job.getInfoJob(dt[0]);

                                        str += infoJob;
                                        taCommand.append(str);
                                        byte[] getJob = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeJob = ByteBuffer.allocate(9).putInt(getJob.length).array();
                                        os.write(sizeJob);
                                        os.write(getJob);
                                        os.flush();
                                    } else if (extra.equals("DELE")) {
                                        str = "";
                                        if (job.delJob(dt[0])) {
                                            str = "TXTJOBDELESUCC";
                                        } else {
                                            str = "TXTJOBDELEFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] delJob = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeJob = ByteBuffer.allocate(9).putInt(delJob.length).array();
                                        os.write(sizeJob);
                                        os.write(delJob);
                                        os.flush();
                                    } else if (extra.equals("REMO")) {
                                        str = "";
                                        if (job.removeJob(dt[0], dt[1])) {
                                            str = "TXTJOBREMOSUCC|" + dt[1];
                                        } else {
                                            str = "TXTJOBREMOFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] removeJob = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeJob = ByteBuffer.allocate(9).putInt(removeJob.length).array();
                                        os.write(sizeJob);
                                        os.write(removeJob);
                                        os.flush();
                                    } else if (extra.equals("UPNA")) {
                                        String name = "";
                                        str = "";
                                        if ((name = job.updateNameJob(dt[0], dt[1])) != null) {
                                            str = "TXTJOBUPNASUCC";
                                        } else {
                                            str = "TXTJOBUPNAFAIL";
                                        }

                                        taCommand.append(str);
                                        byte[] nameJob = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeJob = ByteBuffer.allocate(9).putInt(nameJob.length).array();
                                        os.write(sizeJob);
                                        os.write(nameJob);
                                        os.flush();

                                    } else if (extra.equals("GETC")) {
                                        String cmt = job.getComment(dt[0]);
                                        if (cmt != null && cmt.equals("") == false) {
                                            String dtCom[] = cmt.split("[|]");
                                            for (int i = 0; i < dtCom.length; i += 4) {
                                                str = "";
                                                if (dtCom[i + 2].equals("TXT")) {
                                                    str = "TXTCMTTEXT";
                                                    str += dtCom[i + 1] + "|" + dtCom[i + 3];
                                                    taCommand.append(str);
                                                    byte[] getCmt = str.getBytes(Charset.forName("UTF-8"));
                                                    byte[] sizeCmt = ByteBuffer.allocate(9).putInt(getCmt.length).array();
                                                    os.write(sizeCmt);
                                                    os.write(getCmt);
                                                    os.flush();
                                                } else {
                                                    str = "TXTCMTIMGE" + dtCom[i + 1] + "|";
                                                    String urlFile = dtCom[i + 3].substring(0, dtCom[i + 3].length() - dtCom[i].length());
                                                    File myFile = new File(urlFile);
                                                    byte[] command = str.getBytes(Charset.forName("UTF-8"));
                                                    byte[] byteImage = new byte[(int) myFile.length() + command.length];
                                                    int j = 0;
                                                    for (j = 0; j < command.length; j++) {
                                                        byteImage[j] = command[j];
                                                    }
                                                    BufferedInputStream bis = new BufferedInputStream(new FileInputStream(myFile));
                                                    bis.read(byteImage, command.length, byteImage.length - command.length);
                                                    taCommand.append(str);
                                                    byte[] sizeCmt = ByteBuffer.allocate(9).putInt(byteImage.length).array();
                                                    os.write(sizeCmt);
                                                    os.write(byteImage);
                                                    os.flush();
                                                }

                                            }
                                            str = "TXTCMTEND1";
                                            taCommand.append(str);
                                            byte[] getCmt = str.getBytes(Charset.forName("UTF-8"));
                                            byte[] sizeCmt = ByteBuffer.allocate(9).putInt(getCmt.length).array();
                                            os.write(sizeCmt);
                                            os.write(getCmt);
                                            os.flush();
                                        } else {
                                            str = "TXTCMTNULL";
                                            taCommand.append(str);
                                            byte[] getCmt = str.getBytes(Charset.forName("UTF-8"));
                                            byte[] sizeCmt = ByteBuffer.allocate(9).putInt(getCmt.length).array();
                                            os.write(sizeCmt);
                                            os.write(getCmt);
                                            os.flush();
                                        }
                                    }
                                    break;

                                //Cap naht mo ta
                                case "DES":
                                    str = "";
                                    if (job.updateDes(dt[0], dt[1])) {
                                        str = "TXTDESUPDASUCC";

                                    } else {
                                        str = "TXTDESUPDAFAIL";
                                    }
                                    taCommand.append(str);
                                    byte[] getDes = str.getBytes(Charset.forName("UTF-8"));
                                    byte[] sizeDes = ByteBuffer.allocate(9).putInt(getDes.length).array();
                                     {
                                        try {
                                            os.write(sizeDes);
                                            os.write(getDes);
                                            os.flush();
                                        } catch (IOException ex) {
                                            Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                    break;

                                case "CMT":
                                    if (extra.equals("ADDC")) {
                                        mem.addComment(dt[0], dt[1], dt[2], 0);
                                        str = "TXTCMTSUCC";
                                        taCommand.append(str);
                                        byte[] addCmt = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeAddCmt = ByteBuffer.allocate(9).putInt(addCmt.length).array();
                                        {
                                            try {
                                                os.write(sizeAddCmt);
                                                os.write(addCmt);
                                                os.flush();
                                            } catch (IOException ex) {
                                                Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                    }
                                    break;
                            }
                            break;

                        case "IMG":
                            if (cmd.equals("AVA")) {
                                //CHINH SUA AVATAR
                                if (extra.equals("UPDA")) {
                                    String str1 = dt[0] + dt[1];
                                    byte[] command = str1.getBytes(Charset.forName("UTF-8"));
                                    int sizeCMD = command.length + 12;
                                    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(mybytearray, sizeCMD, mybytearray.length - sizeCMD);
                                    BufferedImage bufferedImage = ImageIO.read(byteArrayInputStream);
                                    File outputFile = new File("avatar\\" + dt[1]);
                                    ImageIO.write(bufferedImage, "jpg", outputFile);
                                    String url = System.getProperty("user.dir", null);
                                    url += "\\avatar\\" + dt[1];
                                    str = "";
                                    if (mem.addAvatar(dt[0], url)) {
                                        str = "IMGAVAUPDASUCC";
                                    } else {
                                        str = "IMGAVAUPDAFAIL";
                                    }
                                    taCommand.append(str);
                                    byte[] getAva = str.getBytes(Charset.forName("UTF-8"));
                                    byte[] sizeAva = ByteBuffer.allocate(9).putInt(getAva.length).array();
                                    os.write(sizeAva);
                                    os.write(getAva);
                                    os.flush();
                                } // LAY AVATAR
                                else if (extra.equals("GETA")) {
                                    String avatar = mem.getAvatar(dt[0]);
                                    str = "";
                                    if (!avatar.equals("")) {
                                        try {
                                            File myFile = new File(avatar);
                                            str = "IMGAVASUCC";
                                            byte[] command = str.getBytes(Charset.forName("UTF-8"));
                                            byte[] byteImage = new byte[(int) myFile.length() + command.length];
                                            int j;
                                            for (j = 0; j < command.length; j++) {
                                                byteImage[j] = command[j];
                                            }
                                            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(myFile));
                                            bis.read(byteImage, command.length, byteImage.length - command.length);
                                            taCommand.append(str);
                                            byte[] sizeAva = ByteBuffer.allocate(9).putInt(byteImage.length).array();
                                            os.write(sizeAva);
                                            os.write(byteImage);
                                            os.flush();
                                        } catch (Exception e) {
                                            System.out.println("File " + avatar + " không tồn tại");
                                            str = "IMGAVANULL";
                                            byte[] command = str.getBytes(Charset.forName("UTF-8"));
                                            byte[] sizeAva = ByteBuffer.allocate(9).putInt(command.length).array();
                                            os.write(sizeAva);
                                            os.write(command);
                                            os.flush();
                                        }
                                    } else {
                                        str = "IMGAVANULL";
                                        taCommand.append(str);
                                        byte[] command = str.getBytes(Charset.forName("UTF-8"));
                                        byte[] sizeAva = ByteBuffer.allocate(9).putInt(command.length).array();
                                        os.write(sizeAva);
                                        os.write(command);
                                        os.flush();
                                    }
                                } //XOA AVATAR
                                else if (extra.equals("DELE")) {
                                    str = "";
                                    if (mem.delAvatar(dt[0])) {
                                        str = "IMGAVADELESUCC|";
                                    } else {
                                        str = "IMGAVADELEFAIL|";
                                    }
                                    taCommand.append(str);
                                    byte[] delAva = str.getBytes(Charset.forName("UTF-8"));
                                    byte[] sizeAva = ByteBuffer.allocate(9).putInt(delAva.length).array();
                                    os.write(sizeAva);
                                    os.write(delAva);
                                    os.flush();

                                }
                            }

                            if (cmd.equals("CMT")) {
                                int sizeCMD = dt[0].length() + dt[1].length() + dt[2].length() + 13;
                                byte[] comment = new byte[mybytearray.length - sizeCMD];
                                int i = 0, j;
                                for (j = sizeCMD; j < mybytearray.length; j++) {
                                    comment[i++] = mybytearray[j];
                                }
                                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(mybytearray, sizeCMD, comment.length);
                                BufferedImage bufferedImage = ImageIO.read(byteArrayInputStream);
                                File outputFile = new File("image\\" + dt[2]);
                                ImageIO.write(bufferedImage, "jpg", outputFile);
                                String url = System.getProperty("user.dir", null);
                                url += "\\image\\" + dt[2];

                                if (mem.addComment(dt[0], dt[1], url, 1)) {
                                    str = "TXTCMTIMGESUCC";
                                } else {
                                    str = "TXTCMTIMGEFAIL";
                                }
                                taCommand.append(str);
                                byte[] cmtImg = str.getBytes(Charset.forName("UTF-8"));
                                byte[] sizecmtImg = ByteBuffer.allocate(9).putInt(cmtImg.length).array();
                                os.write(sizecmtImg);
                                os.write(cmtImg);
                                os.flush();
                            }
                            break;
                    }

                }
            } catch (IOException ex) {
                System.out.println("Socket closed!");
            }
        }
    }

    public class createServer implements Runnable {

        @Override
        public void run() {
            try {
                ServerSocket serverSock = new ServerSocket(defaultPort);
                while (true) {
                    Socket socket = serverSock.accept();
                    Thread listen = new Thread(new readData(socket));
                    listen.start();
                }
            } catch (Exception ex) {
                taCommand.append("Create server fail!\n");
            }
        }

    }

    public Connection createConnnection(String name_db) throws IOException, ClassNotFoundException, SQLException {
        Connection connection = null;
        Class.forName("org.postgresql.Driver");
        connection = DriverManager.getConnection("jdbc:postgresql://localhost/" + name_db, "postgres", "hedspi");
        return connection;

    }

    public Statement createStatement(Connection connection) {
        Statement stt = null;
        if (stt == null) {
            try {
                stt = (Statement) connection.createStatement();
                return stt;
            } catch (SQLException ex) {
                Logger.getLogger(com.sun.corba.se.spi.activation.Server.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return null;
    }

    public class deadLineNoti implements Runnable {

        boolean isTrue = true;

        @Override
        public void run() {

            try {
                while (isTrue == true) {
                    java.util.Date date = new java.util.Date();
                    int day = date.getDate();
                    int hours = date.getHours();
                    int minutes = date.getMinutes();
                    ArrayList<CongViec> arr = job.getListJob();

                    for (int i = 0; i < arr.size(); i++) {
                        CongViec cv = new CongViec();
                        cv = arr.get(i);
                        java.util.Date da = job.getDeadLine(String.valueOf(cv.CV));
                        int ss = support.soSanh(da, date);
                        if (ss == 0) {
                            ArrayList<Integer> arrMem = new ArrayList<>();
                            arrMem = mem.getListMem(cv.CV);
                            for (int j = 0; j < arrMem.size(); j++) {
                                support.insertThongBao(arrMem.get(j), "Công việc " + cv.Ten + " hết hạn trong ngày hôm nay");
                            }
                        } else if (ss > 0 && ss <= 3) {
                            ArrayList<Integer> arrMem = new ArrayList<>();
                            arrMem = mem.getListMem(cv.CV);
                            for (int j = 0; j < arrMem.size(); j++) {
                                support.insertThongBao(arrMem.get(j), "Công việc " + cv.Ten + " còn " + String.valueOf(ss) + " ngày");
                            }
                        }
                    }

                    long times = ((24 - hours) * 60 - minutes) * 60;
                    Thread.sleep(times*1000);
                }

            } catch (InterruptedException ex) {
                Logger.getLogger(BoardServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void btStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartActionPerformed
        Thread t = new Thread(new createServer());
        t.start();
        taCommand.append("Create server successful!\n");
        btStart.setEnabled(false);
    }//GEN-LAST:event_btStartActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoardServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExit;
    private javax.swing.JButton btStart;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taCommand;
    // End of variables declaration//GEN-END:variables
}
